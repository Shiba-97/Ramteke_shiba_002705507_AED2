/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Doctor;
import model.DoctorDirectory;
import model.HospitalDirectory;
import model.Patient;
import model.PatientDirectory;
import model.PersonDirectory;
import model.Request;
import model.SystemClass;
import model.Token;
import model.VitalSigns;

/**
 *
 * @author Shiba
 */
public class DoctorEncounters extends javax.swing.JPanel {

    /**
     * Creates new form DoctorEncounters
     */
    JPanel workArea;
    PersonDirectory person;
    PatientDirectory ptDirectory;
    DoctorDirectory docDirectory;
    HospitalDirectory hospDirectory;
    City commDirectory;
    SystemClass sys;
    public int j;
    
    public DoctorEncounters(JPanel workArea, PersonDirectory person, PatientDirectory ptDirectory,DoctorDirectory docDirectory, 
                            HospitalDirectory hospDirectory,City commDirectory, SystemClass sys, int j) {
        initComponents();
        
        this.workArea = workArea;
        this.ptDirectory = ptDirectory;
        this.person = person;
        this.docDirectory = docDirectory;
        this.hospDirectory = hospDirectory;
        this.commDirectory = commDirectory;
        this.sys = sys;
        this.j=j;
        
        
        lblDocName.setText(docDirectory.getDocDirectory().get(j).getPerson().name);
        populateEncounterHistTable(docDirectory.getDocDirectory().get(j));
        populateRequestList(docDirectory.getDocDirectory().get(j));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabEncHist = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lblDocName = new javax.swing.JLabel();
        btnAddVitals = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listReq = new javax.swing.JList<>();
        txtBloodup = new javax.swing.JTextField();
        txtBloodlow = new javax.swing.JTextField();
        txtHeartrate = new javax.swing.JTextField();
        txtTemperature = new javax.swing.JTextField();
        txtEncID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblPatname = new javax.swing.JLabel();
        btnCheck = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        lblHospname = new javax.swing.JLabel();

        setBackground(new java.awt.Color(102, 204, 255));

        tabEncHist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient Name", "Hospital Name", "Encounter ID", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabEncHist);
        if (tabEncHist.getColumnModel().getColumnCount() > 0) {
            tabEncHist.getColumnModel().getColumn(0).setResizable(false);
            tabEncHist.getColumnModel().getColumn(1).setResizable(false);
            tabEncHist.getColumnModel().getColumn(2).setResizable(false);
            tabEncHist.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Your encounter History");

        btnAddVitals.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAddVitals.setText("Add Vitals");
        btnAddVitals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVitalsActionPerformed(evt);
            }
        });

        listReq.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(listReq);

        txtBloodlow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBloodlowActionPerformed(evt);
            }
        });

        txtTemperature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTemperatureActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Encounter No:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Blood Pressure");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Heart Rate");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Temperature");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Patient Name :");

        btnCheck.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCheck.setText("Do Checkup");
        btnCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Hospital Name");

        lblHospname.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblDocName, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 421, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblPatname, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblHospname, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtTemperature, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtHeartrate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtBloodup, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtBloodlow, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(txtEncID, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAddVitals, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35))))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, jLabel3, jLabel4, jLabel5});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDocName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCheck)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblPatname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                                        .addComponent(lblHospname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel2)
                                            .addComponent(txtEncID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel3)
                                            .addComponent(txtBloodup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtBloodlow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(5, 5, 5)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtHeartrate))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel5)
                                            .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnAddVitals))))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
                        .addGap(24, 24, 24))))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel2, jLabel3, jLabel4, jLabel5});

    }// </editor-fold>//GEN-END:initComponents

    private void btnAddVitalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVitalsActionPerformed
        // TODO add your handling code here:
        
        int encID = Integer.parseInt(txtEncID.getText());
        int bloodUp = Integer.parseInt(txtBloodup.getText());
        int bloodLow = Integer.parseInt(txtBloodlow.getText());
        int heartRate = Integer.parseInt(txtHeartrate.getText());
        int temperature = Integer.parseInt(txtTemperature.getText());
        
        DefaultListModel list = (DefaultListModel) listReq.getModel();
        int selectedRow = listReq.getSelectedIndex();
        Token tok = (Token) list.getElementAt(selectedRow);
        if(docDirectory.getDocDirectory().get(j)!=null){
        ArrayList<Patient> impPatients = docDirectory.getDocDirectory().get(j).getDocPatients();
        if(impPatients!=null){
            for(int x =0; x<impPatients.size();x++){
                if(impPatients.get(x).getEncounters()!=null){
                for(int y = 0; y<impPatients.get(x).getEncounters().size();y++){
                    if(impPatients.get(x).getPerson().name.equals(lblPatname.getText())){
                        VitalSigns vitalSign = impPatients.get(x).getEncounters().get(y).createAndAddVitalSign();
                        impPatients.get(x).setEncounterID(encID);
                        vitalSign.setBloodpressureupper(bloodUp);
                        vitalSign.setBloodpressurelower(bloodLow);
                        vitalSign.setHeartrate(heartRate);
                        vitalSign.setTemperature(temperature);
                        vitalSign.setDate(new Date());
                        for(int z = 0; z< sys.getRequestDirectory().size(); z++){
                            for(int v = 0; v< impPatients.size(); v++){
                                if(tok.getReqpatient().equals(impPatients.get(v).getPerson().name)){
                                    sys.getRequestDirectory().get(z).deleteToken(tok);
                                }
                            }
                        }
                    }}
                }
            }
        } else {
        }
        }
//        try {
//            int respiratoryRate = Integer.parseInt(respiratoryRateJTextField.getText());
//            int heartRate = Integer.parseInt(heartRateJTextField.getText());
//            int bloodPressure = Integer.parseInt(bloodPressureJTextField.getText());
//            int weight = Integer.parseInt(weightJTextField.getText());
//            
//            VitalSign vitalSign = patient.getVitalSignHistory().createAndAddVitalSign();
//            vitalSign.setRespiratoryRate(respiratoryRate);
//            vitalSign.setHeartRate(heartRate);
//            vitalSign.setBloodPressure(bloodPressure);
//            vitalSign.setWeight(weight);
//            /*Set current date and time as TimeStamp*/
//            vitalSign.setTimestamp(new Date());
//            JOptionPane.showMessageDialog(this, "Vital signs added!!", "Update",
//                    JOptionPane.INFORMATION_MESSAGE);
//            clearFields();
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(this, "Please enter correct values",
//                    "Error", JOptionPane.ERROR_MESSAGE);
//        }
    }//GEN-LAST:event_btnAddVitalsActionPerformed

    private void txtTemperatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTemperatureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTemperatureActionPerformed

    
    
    private void btnCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckActionPerformed
        // TODO add your handling code here:
        DefaultListModel list = (DefaultListModel) listReq.getModel();
        int selectedRow = listReq.getSelectedIndex();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from List.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if(selectedRow>=0){
            Token t = (Token) list.getElementAt(selectedRow);
            String patientname = t.getReqpatient();
            if(docDirectory.getDocDirectory().get(j)!=null){
            for(Patient pa : docDirectory.getDocDirectory().get(j).getDocPatients()){
                
                if(patientname.equals(pa.getPerson().name)){
                    String hospname = pa.getHospName();
                    lblHospname.setText(hospname);
                }
            }
            }
            lblPatname.setText(t.getReqpatient());
            
        
        }     
    }//GEN-LAST:event_btnCheckActionPerformed

    private void txtBloodlowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBloodlowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBloodlowActionPerformed
    private void populateRequestList(Doctor doctor){
            
        DefaultListModel list = new DefaultListModel();
        if(sys.requestDirectory!=null){
            ArrayList<Request> sysdir = sys.requestDirectory;
            int size = sysdir.size();
            if(size==0){
                //
            }else{
                for(Token t : sys.requestDirectory.get(size-1).getRequests()){
                    if(doctor.getPerson().name.equals(t.getReqdoctor()))
                        list.addElement(t);
                }
            }
        }
        listReq.setModel(list);
//        DefaultListModel list = new DefaultListModel();
//        if (doctor != null && doctor.getPatient() != null) {
//            for(Patient pt : doctor.getPatient().getEncounters().getRequests()){
//                if(pt.docName.equals(lblDocName.getText())){
//                    list.addElement(pt);
//                }
//            }
//        }
//        
//        listReq.setModel(list);
    
    }
    private void populateEncounterHistTable(Doctor doctor) {
        
            DefaultTableModel model = (DefaultTableModel) tabEncHist.getModel();
            model.setRowCount(0);
            
            
        if(doctor.getDocPatients()!=null ){
        for(Patient pa : doctor.getDocPatients()){
            if(pa.getEncounters()!=null){
                for(int x = 0; x< pa.getEncounters().size(); x++){
                    if(pa.getEncounters().get(x).getVitalSignsDirectory()!=null){
                    for(int y =0; y< pa.getEncounters().get(x).getVitalSignsDirectory().size(); y++){
                        Object[] row = new Object[4];
                        row[0] = pa.getPerson().name;
                        row[1] = pa.hospName;
                        row[2] = pa.encounterID;
                        row[3] = pa.getEncounters().get(x).getVitalSignsDirectory().get(y).getDate();

                        model.addRow(row);
                    }
                    }
                }
            }
        }
        }
            
            
              
              
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddVitals;
    private javax.swing.JButton btnCheck;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDocName;
    private javax.swing.JLabel lblHospname;
    private javax.swing.JLabel lblPatname;
    private javax.swing.JList<String> listReq;
    private javax.swing.JTable tabEncHist;
    private javax.swing.JTextField txtBloodlow;
    private javax.swing.JTextField txtBloodup;
    private javax.swing.JTextField txtEncID;
    private javax.swing.JTextField txtHeartrate;
    private javax.swing.JTextField txtTemperature;
    // End of variables declaration//GEN-END:variables
}
