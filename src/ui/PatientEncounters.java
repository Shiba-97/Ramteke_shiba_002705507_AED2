/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Community;
import model.Doctor;
import model.DoctorDirectory;
import model.Encounter;
import model.Hospital;
import model.HospitalDirectory;
import model.Patient;
import model.PatientDirectory;
import model.PersonDirectory;
import model.Request;
import model.SystemClass;
import model.Token;
import model.VitalSigns;

/**
 *
 * @author Shiba
 */
public class PatientEncounters extends javax.swing.JPanel {

    /**
     * Creates new form PatientEncounters
     */
    JPanel workArea;
    PersonDirectory person;
    PatientDirectory ptDirectory;
    DoctorDirectory docDirectory;
    HospitalDirectory hospDirectory;
    City commDirectory;
    SystemClass sys;
    public int j;
    public PatientEncounters(JPanel workArea, PersonDirectory person, PatientDirectory ptDirectory,DoctorDirectory docDirectory, 
                            HospitalDirectory hospDirectory,City commDirectory, SystemClass sys, int j) {
        initComponents();
        this.workArea = workArea;
        this.ptDirectory = ptDirectory;
        this.person = person;
        this.docDirectory = docDirectory;
        this.hospDirectory = hospDirectory;
        this.commDirectory = commDirectory;
        this.sys = sys;
        this.j=j;
        if(docDirectory.getDocDirectory()!=null){
        ArrayList<Doctor> docArray = docDirectory.getDocDirectory();
        if(!docArray.isEmpty()){
            for(int k = 0; k < docArray.size(); k++){
                cmbDoctors.addItem(docArray.get(k).toString());
                
            }
        }
        }
        if(hospDirectory.getHospDirectory()!=null){
        ArrayList<Hospital> hospArray = hospDirectory.getHospDirectory();
        if(!hospArray.isEmpty()){
            for(Hospital h : hospArray){
                if(h.getCommunity().comm.equals(ptDirectory.getPtDirectory().get(j).getPerson().comm)){
                    for(int k = 0; k < hospArray.size(); k++){
                        cmbHospitals.addItem(hospArray.get(k).toString());
                        }
                }
            }
        }
        }
        lblPatientname.setText(ptDirectory.getPtDirectory().get(j).getPerson().name);
        populateEncounterHistoryTable(ptDirectory.getPtDirectory().get(j));
        populateRequestList(ptDirectory.getPtDirectory().get(j));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabEncounterHistory = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbDoctors = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cmbHospitals = new javax.swing.JComboBox<>();
        btnRequest = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listRequest = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        lblPatientname = new javax.swing.JLabel();

        setBackground(new java.awt.Color(102, 204, 255));

        tabEncounterHistory.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tabEncounterHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Doctor Name", "Hospital Name", "Encounter ID", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabEncounterHistory);
        if (tabEncounterHistory.getColumnModel().getColumnCount() > 0) {
            tabEncounterHistory.getColumnModel().getColumn(0).setResizable(false);
            tabEncounterHistory.getColumnModel().getColumn(1).setResizable(false);
            tabEncounterHistory.getColumnModel().getColumn(2).setResizable(false);
            tabEncounterHistory.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Patient Name");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Doctors :");

        cmbDoctors.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Hospital Name:");

        cmbHospitals.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        btnRequest.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRequest.setText("Request Appointment");
        btnRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(listRequest);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Pending Requests");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 756, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblPatientname, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(cmbDoctors, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cmbHospitals, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btnRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(lblPatientname, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 19, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cmbDoctors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(cmbHospitals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRequest)
                        .addGap(36, 36, 36))))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    private void populateEncounterHistoryTable(Patient patient) {
        
        DefaultTableModel model = (DefaultTableModel) tabEncounterHistory.getModel();
        model.setRowCount(0);
             if (patient != null && patient.getEncounters() != null) {
                for(int x=0; x<patient.getEncounters().size(); x++){
                    if(patient.getEncounters().get(x).getVitalSignsDirectory()!=null){
                ArrayList<VitalSigns> vitalSignsList = patient.getEncounters().get(x).getVitalSignsDirectory();
                
            if (vitalSignsList.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No vital signs found. Please"
                        + " add vital signs", "Error", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            for (VitalSigns vitalSign : vitalSignsList) {
                Object[] row = new Object[4];
                row[0] = patient.docName;
                row[1] = patient.hospName;
                row[2] = patient.getEncounters().get(x);
                row[3] = vitalSign.getDate();
                model.addRow(row);
            }
            }
          }
    }    
    }
             
    private void populateRequestList(Patient patient){
        
        DefaultListModel list = new DefaultListModel();
        
        if(sys.getRequestDirectory()!=null){
        ArrayList<Request> sysdir = sys.getRequestDirectory();
        int size = sysdir.size();
        
        if(size==0){
            //
        }else{
            for(Token t : sys.requestDirectory.get(size-1).getRequests()){
                if(patient.getPerson().name.equals(t.getReqpatient()))
                    list.addElement(t);
            }
        }
        }
        listRequest.setModel(list);
    
    }
    
    private void btnRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestActionPerformed
        // TODO add your handling code here:
        int m = cmbDoctors.getSelectedIndex();
        String docName = cmbDoctors.getSelectedItem().toString();
        String hospName = cmbHospitals.getSelectedItem().toString();
        int h = cmbHospitals.getSelectedIndex();
        
        DefaultListModel list = new DefaultListModel();
        if(m==0 || h==0){
            JOptionPane.showMessageDialog(null, " Select both fields !");
            return;
        }
            
            for(int x = 0; x<sys.requestDirectory.lastIndexOf(x);x++){
                Token t = sys.requestDirectory.get(x).addToken();
                
                t.setReqdoctor(docName);
                t.setReqpatient(lblPatientname.getText());
            }
            
    }//GEN-LAST:event_btnRequestActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRequest;
    private javax.swing.JComboBox<String> cmbDoctors;
    private javax.swing.JComboBox<String> cmbHospitals;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblPatientname;
    private javax.swing.JList<String> listRequest;
    private javax.swing.JTable tabEncounterHistory;
    // End of variables declaration//GEN-END:variables
}
